import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '../models/product.dart';
import '../models/inventory_transaction.dart';
import '../services/inventory_service.dart';

class PurchaseScreen extends StatefulWidget {
  final Map<String, dynamic> product;

  const PurchaseScreen({Key? key, required this.product}) : super(key: key);

  @override
  _PurchaseScreenState createState() => _PurchaseScreenState();
}

class _PurchaseScreenState extends State<PurchaseScreen> {
  final _formKey = GlobalKey<FormState>();
  final _quantityController = TextEditingController();
  final _unitPriceController = TextEditingController();
  final _supplierNameController = TextEditingController();
  final _batchNumberController = TextEditingController();
  final _notesController = TextEditingController();
  
  DateTime selectedDate = DateTime.now();
  bool useAutoGeneratedBatch = true;
  
  double get totalAmount => (int.tryParse(_quantityController.text) ?? 0) * 
                           (double.tryParse(_unitPriceController.text) ?? 0.0);

  @override
  void initState() {
    super.initState();
    _generateAutoBatchNumber();
    
    // Ürünün alış fiyatını otomatik doldur (varsa)
    final purchasePrice = widget.product['purchase_price']?.toString() ?? '';
    if (purchasePrice.isNotEmpty && double.tryParse(purchasePrice) != null) {
      _unitPriceController.text = purchasePrice;
      print('💰 Alış fiyatı otomatik dolduruldu: $purchasePrice');
    } else {
      print('ℹ️ Ürün için alış fiyatı bulunamadı, manuel giriş gerekli');
    }
    
    _quantityController.addListener(() => setState(() {}));
    _unitPriceController.addListener(() => setState(() {}));
  }

  void _generateAutoBatchNumber() {
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    _batchNumberController.text = 'LOT-$timestamp';
  }

  Widget _buildPurchaseInfoCard() {
    return Card(
      margin: EdgeInsets.all(16),
      child: Padding(
        padding: EdgeInsets.all(16),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                '📦 Satın Alma Bilgileri',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              SizedBox(height: 16),
              
              // Miktar ve Birim Fiyat
              Row(
                children: [
                  Expanded(
                    child: TextFormField(
                      controller: _quantityController,
                      decoration: InputDecoration(
                        labelText: 'Miktar',
                        suffixText: widget.product['unit']?.toString() ?? '',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.inventory_2),
                      ),
                      keyboardType: TextInputType.number,
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Miktar giriniz';
                        }
                        final quantity = int.tryParse(value);
                        if (quantity == null || quantity <= 0) {
                          return 'Geçerli miktar giriniz';
                        }
                        return null;
                      },
                    ),
                  ),
                  SizedBox(width: 16),
                  Expanded(
                    child: TextFormField(
                      controller: _unitPriceController,
                      decoration: InputDecoration(
                        labelText: 'Birim Fiyat',
                        prefixText: '₺',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.attach_money),
                      ),
                      keyboardType: TextInputType.numberWithOptions(decimal: true),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Fiyat giriniz';
                        }
                        final price = double.tryParse(value);
                        if (price == null || price <= 0) {
                          return 'Geçerli fiyat giriniz';
                        }
                        return null;
                      },
                    ),
                  ),
                ],
              ),
              SizedBox(height: 16),
              
              // Tedarikçi
              TextFormField(
                controller: _supplierNameController,
                decoration: InputDecoration(
                  labelText: 'Tedarikçi Adı',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.business),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Tedarikçi adı giriniz';
                  }
                  return null;
                },
              ),
              SizedBox(height: 16),
              
              // Tarih seçimi
              InkWell(
                onTap: _selectDate,
                child: Container(
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                  decoration: BoxDecoration(
                    border: Border.all(color: Colors.grey),
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: Row(
                    children: [
                      Icon(Icons.calendar_today),
                      SizedBox(width: 12),
                      Text(
                        'Satın Alma Tarihi: ${DateFormat('dd.MM.yyyy').format(selectedDate)}',
                        style: TextStyle(fontSize: 16),
                      ),
                    ],
                  ),
                ),
              ),
              SizedBox(height: 16),
              
              // Notlar
              TextFormField(
                controller: _notesController,
                decoration: InputDecoration(
                  labelText: 'Notlar (İsteğe Bağlı)',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.notes),
                ),
                maxLines: 2,
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildBatchCard() {
    return Card(
      margin: EdgeInsets.all(16),
      child: Padding(
        padding: EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '🏷️ Lot/Batch Bilgileri',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 16),
            
            // Otomatik veya Manuel batch
            Row(
              children: [
                Expanded(
                  child: RadioListTile<bool>(
                    title: Text('🤖 Otomatik'),
                    subtitle: Text('Sistem batch oluşturur'),
                    value: true,
                    groupValue: useAutoGeneratedBatch,
                    onChanged: (value) {
                      setState(() {
                        useAutoGeneratedBatch = value!;
                        if (value) {
                          _generateAutoBatchNumber();
                        }
                      });
                    },
                  ),
                ),
                Expanded(
                  child: RadioListTile<bool>(
                    title: Text('✋ Manuel'),
                    subtitle: Text('Kendim belirleyeceğim'),
                    value: false,
                    groupValue: useAutoGeneratedBatch,
                    onChanged: (value) {
                      setState(() {
                        useAutoGeneratedBatch = value!;
                        if (!value) {
                          _batchNumberController.clear();
                        }
                      });
                    },
                  ),
                ),
              ],
            ),
            
            // Batch number input
            TextFormField(
              controller: _batchNumberController,
              decoration: InputDecoration(
                labelText: 'Batch/Lot Numarası',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.qr_code),
                enabled: !useAutoGeneratedBatch,
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Batch numarası gerekli';
                }
                return null;
              },
            ),
            
            if (useAutoGeneratedBatch) ...[
              SizedBox(height: 8),
              Row(
                children: [
                  Icon(Icons.info, size: 16, color: Colors.blue),
                  SizedBox(width: 4),
                  Text(
                    'Otomatik batch numarası üretildi',
                    style: TextStyle(fontSize: 12, color: Colors.grey.shade600),
                  ),
                ],
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildSummaryCard() {
    return Card(
      margin: EdgeInsets.all(16),
      color: Colors.green.shade50,
      child: Padding(
        padding: EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '💰 Satın Alma Özeti',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 16),
            
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text('Miktar:'),
                Text(
                  '${_quantityController.text} ${widget.product['unit']?.toString() ?? ''}',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
              ],
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text('Birim Fiyat:'),
                Text(
                  '₺${_unitPriceController.text}',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
              ],
            ),
            Divider(),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text('Toplam Tutar:', style: TextStyle(fontWeight: FontWeight.bold)),
                Text(
                  '₺${totalAmount.toStringAsFixed(2)}',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 18,
                    color: Colors.green,
                  ),
                ),
              ],
            ),
            SizedBox(height: 8),
            Text(
              'Mevcut Stok: ${widget.product['current_stock']?.toString() ?? '0'} ${widget.product['unit']?.toString() ?? ''}',
              style: TextStyle(fontSize: 12, color: Colors.grey.shade600),
            ),
            Text(
              'Satın alma sonrası: ${(widget.product['current_stock'] ?? 0) + (int.tryParse(_quantityController.text) ?? 0)} ${widget.product['unit']?.toString() ?? ''}',
              style: TextStyle(fontSize: 12, color: Colors.green.shade700, fontWeight: FontWeight.bold),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _selectDate() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: selectedDate,
      firstDate: DateTime(2020),
      lastDate: DateTime.now(),
    );
    if (picked != null && picked != selectedDate) {
      setState(() {
        selectedDate = picked;
        if (useAutoGeneratedBatch) {
          _generateAutoBatchNumber();
        }
      });
    }
  }

  Future<void> _processPurchase() async {
    if (_formKey.currentState?.validate() != true) return;
    
    final quantity = int.parse(_quantityController.text);
    final unitPrice = double.parse(_unitPriceController.text);
    final supplierName = _supplierNameController.text.trim();
    final batchNumber = _batchNumberController.text.trim();
    final notes = _notesController.text.trim().isEmpty ? null : _notesController.text.trim();
    
    try {
      // Loading dialog göster
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => AlertDialog(
          content: Row(
            children: [
              CircularProgressIndicator(),
              SizedBox(width: 16),
              Text('Satın alma kaydediliyor...'),
            ],
          ),
        ),
      );
      
      await InventoryService().addPurchase(
        productId: widget.product['id']?.toString() ?? '',
        productName: widget.product['name']?.toString() ?? '',
        quantity: quantity,
        unitPrice: unitPrice,
        supplierName: supplierName,
        batchNumber: batchNumber,
        notes: notes,
        transactionDate: selectedDate,
      );
      
      // Loading dialog'u kapat
      Navigator.of(context).pop();
      
      // Başarı dialog'u göster
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: Row(
            children: [
              Icon(Icons.check_circle, color: Colors.green),
              SizedBox(width: 8),
              Text('Satın Alma Tamamlandı'),
            ],
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('✅ Satın alma başarıyla kaydedildi'),
              SizedBox(height: 8),
              Text('📦 Miktar: $quantity ${widget.product['unit']?.toString() ?? ''}'),
              Text('💰 Toplam Tutar: ₺${totalAmount.toStringAsFixed(2)}'),
              Text('🏷️ Batch: $batchNumber'),
              Text('🏪 Tedarikçi: $supplierName'),
              SizedBox(height: 8),
              Container(
                padding: EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.green.shade50,
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Text(
                  '🎉 Yeni stok lot\'u oluşturuldu ve envantere eklendi!',
                  style: TextStyle(
                    color: Colors.green.shade700,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(); // Dialog'u kapat
                Navigator.of(context).pop(true); // Ana sayfaya dön ve refresh tetikle
              },
              child: Text('Tamam'),
            ),
          ],
        ),
      );
      
    } catch (e) {
      // Loading dialog'u kapat
      Navigator.of(context).pop();
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Satın alma hatası: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('🛍️ Satın Alma'),
        backgroundColor: Colors.green,
        foregroundColor: Colors.white,
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Ürün bilgisi
            Card(
              margin: EdgeInsets.all(16),
              child: ListTile(
                leading: Icon(Icons.inventory, color: Colors.green, size: 40),
                title: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      widget.product['name']?.toString() ?? '',
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 18,
                      ),
                    ),
                    Text('SKU: ${widget.product['sku']?.toString() ?? ''}'),
                    Text('Mevcut Stok: ${widget.product['current_stock']?.toString() ?? '0'} ${widget.product['unit']?.toString() ?? ''}'),
                  ],
                ),
              ),
            ),
            
            // Satın alma bilgileri
            _buildPurchaseInfoCard(),
            
            // Batch bilgileri
            _buildBatchCard(),
            
            // Özet
            _buildSummaryCard(),
            
            // Satın alma butonu
            Container(
              width: double.infinity,
              margin: EdgeInsets.all(16),
              child: ElevatedButton(
                onPressed: _processPurchase,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                  padding: EdgeInsets.symmetric(vertical: 16),
                ),
                child: Text(
                  'Satın Almayı Tamamla',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
              ),
            ),
            
            SizedBox(height: 20),
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    _quantityController.dispose();
    _unitPriceController.dispose();
    _supplierNameController.dispose();
    _batchNumberController.dispose();
    _notesController.dispose();
    super.dispose();
  }
} 